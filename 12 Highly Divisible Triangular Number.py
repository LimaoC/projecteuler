"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?
"""
import math


def num_of_divisors(n):
    divisors = []
    for i in range(1, math.ceil(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if not i == int(n / i):
                divisors.append(int(n / i))

    return len(divisors)


def main():
    index = 1
    number = 1
    highest_num_of_divisors = 1

    while highest_num_of_divisors <= 500:
        update triangle number
        number += index + 1
        index += 1

        update highest_num_of_divisors if number has a higher num of divisors
        if num_of_divisors(number) > highest_num_of_divisors:
            highest_num_of_divisors = num_of_divisors(number)

    return number


print(main())
